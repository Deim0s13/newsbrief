name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

permissions:
  contents: read
  packages: write
  security-events: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: ðŸ§ª Test & Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov black isort mypy

      - name: Code formatting check
        run: |
          black --check --diff app/
          isort --check-only --diff app/

      - name: Type checking
        run: mypy app/ --ignore-missing-imports

      - name: Lint code
        run: |
          python -m py_compile app/*.py

      - name: Run tests
        run: |
          # Currently no tests - placeholder for future
          echo "âœ… Tests passed (placeholder - add pytest when tests exist)"
          
      - name: Security scan
        uses: github/super-linter@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_PYTHON: true
          VALIDATE_DOCKERFILE: true
          VALIDATE_YAML: true

  build:
    name: ðŸ”¨ Build Container
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ github.ref_name }}
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            GIT_SHA=${{ github.sha }}

  security-scan:
    name: ðŸ”’ Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-dev:
    name: ðŸš€ Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment:
      name: development
      url: https://newsbrief-dev.example.com
    steps:
      - name: Deploy to development
        run: |
          echo "ðŸš€ Deploying to development environment"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          echo "Digest: ${{ needs.build.outputs.image-digest }}"
          # Add actual deployment commands here
          # kubectl set image deployment/newsbrief newsbrief=${{ needs.build.outputs.image-tag }}

  deploy-staging:
    name: ðŸŽ­ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: https://newsbrief-staging.example.com
    steps:
      - name: Deploy to staging
        run: |
          echo "ðŸŽ­ Deploying to staging environment"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          # Add actual deployment commands here

  deploy-prod:
    name: ðŸŒŸ Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, security-scan]
    if: github.event_name == 'release'
    environment:
      name: production
      url: https://newsbrief.example.com
    steps:
      - name: Deploy to production
        run: |
          echo "ðŸŒŸ Deploying to production environment"
          echo "Version: ${{ github.event.release.tag_name }}"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          # Add actual deployment commands here

  create-release:
    name: ðŸ“¦ Create Release Assets
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create release archive
        run: |
          tar -czf newsbrief-${{ github.ref_name }}.tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='data/newsbrief.sqlite3' \
            --exclude='.venv' \
            .

      - name: Generate changelog
        id: changelog
        run: |
          echo "## Changes in ${{ github.ref_name }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> RELEASE_NOTES.md

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            newsbrief-${{ github.ref_name }}.tar.gz
            compose.yaml
            Dockerfile
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
